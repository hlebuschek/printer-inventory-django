import os
from celery import Celery
from django.conf import settings
import logging

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'printer_inventory.settings')

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Celery
app = Celery('printer_inventory')

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º CELERY_
app.config_from_object('django.conf:settings', namespace='CELERY')

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç Django –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º
import django
django.setup()

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –Ø–≤–Ω–æ–µ –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å –¥–µ–±–∞–≥–æ–º
def custom_autodiscover_tasks():
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    logger = logging.getLogger(__name__)
    
    # –°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á
    app_names = [
        'inventory',
        'contracts', 
        'monthly_report',
        'access'
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ INSTALLED_APPS
    if hasattr(settings, 'INSTALLED_APPS'):
        app_names.extend(settings.INSTALLED_APPS)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    app_names = list(set(app_names))
    
    logger.info(f"Searching for tasks in apps: {app_names}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    discovered_tasks = []
    for app_name in app_names:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å tasks
            tasks_module = f"{app_name}.tasks"
            __import__(tasks_module)
            discovered_tasks.append(tasks_module)
            logger.info(f"‚úÖ Found tasks in {tasks_module}")
        except ImportError as e:
            # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –Ω–µ –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–º–µ—é—Ç tasks.py
            if 'inventory.tasks' in str(e):
                logger.error(f"‚ùå Critical: Failed to import inventory.tasks: {e}")
            continue
        except Exception as e:
            logger.error(f"‚ùå Error importing {tasks_module}: {e}")
    
    logger.info(f"Total discovered task modules: {discovered_tasks}")
    return app_names

# –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ
discovered_apps = custom_autodiscover_tasks()
app.autodiscover_tasks(lambda: discovered_apps)

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
try:
    from inventory.tasks import inventory_daemon_task, run_inventory_task
    logging.getLogger(__name__).info("‚úÖ Critical inventory tasks imported successfully")
except Exception as e:
    logging.getLogger(__name__).error(f"‚ùå CRITICAL: Cannot import inventory tasks: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Celery
app.conf.update(
    # –¢–∞–π–º–∞—É—Ç—ã
    task_soft_time_limit=60 * 10,  # 10 –º–∏–Ω—É—Ç soft limit
    task_time_limit=60 * 15,  # 15 –º–∏–Ω—É—Ç hard limit

    # Retry –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    task_acks_late=True,
    task_reject_on_worker_lost=True,

    # Prefetch –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    worker_prefetch_multiplier=1,

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    task_send_sent_event=True,
    task_track_started=True,

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–¥–∞—á
    result_expires=60 * 60 * 24,  # 24 —á–∞—Å–∞

    # Beat –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    beat_schedule_filename='celerybeat-schedule.db',

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    worker_hijack_root_logger=False,
    worker_log_format='[%(asctime)s: %(levelname)s/%(processName)s] %(message)s',
    worker_task_log_format='[%(asctime)s: %(levelname)s/%(processName)s][%(task_name)s(%(task_id)s)] %(message)s',
)

# –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logger = logging.getLogger(__name__)

@app.on_after_configure.connect
def setup_periodic_tasks(sender, **kwargs):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    logger.info("Setting up periodic tasks...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    try:
        from inventory.tasks import inventory_daemon_task
        logger.info("‚úÖ inventory_daemon_task –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á")
    except ImportError as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å inventory_daemon_task: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
    sender.add_periodic_task(
        60.0 * 5,
        check_redis_connection.s(),
        name='check redis connection'
    )

@app.task
def check_redis_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis"""
    try:
        from django.core.cache import cache
        cache.set('health_check', 'ok', 30)
        result = cache.get('health_check')
        return {'status': 'ok', 'redis': 'connected'} if result == 'ok' else {'status': 'error', 'redis': 'disconnected'}
    except Exception as e:
        return {'status': 'error', 'redis': f'error: {str(e)}'}

# –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
@app.task(bind=True)
def debug_task(self):
    print(f'Request: {self.request!r}')

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
@app.on_after_finalize.connect
def debug_tasks(sender, **kwargs):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö"""
    logger.info("=== Registered Celery Tasks ===")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    all_tasks = sorted(sender.tasks.keys())
    logger.info(f"Total registered tasks: {len(all_tasks)}")
    
    inventory_tasks = [t for t in all_tasks if 'inventory' in t]
    logger.info(f"Inventory tasks found: {len(inventory_tasks)}")
    
    for task_name in all_tasks:
        prefix = "üìã" if 'inventory' in task_name else "üìÑ"
        logger.info(f"  {prefix} {task_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é beat
    beat_schedule = getattr(settings, 'CELERY_BEAT_SCHEDULE', {})
    logger.info(f"=== Beat Schedule ({len(beat_schedule)} tasks) ===")
    for name, config in beat_schedule.items():
        task_name = config.get('task', 'Unknown')
        schedule = config.get('schedule', 'Unknown')
        registered = "‚úÖ" if task_name in sender.tasks else "‚ùå"
        logger.info(f"  {registered} {name}: {task_name} every {schedule}s")
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ inventory –∑–∞–¥–∞—á
    required_tasks = [
        'inventory.tasks.inventory_daemon_task',
        'inventory.tasks.run_inventory_task'
    ]
    
    missing_tasks = [t for t in required_tasks if t not in sender.tasks]
    if missing_tasks:
        logger.error("‚ùå CRITICAL: Missing required tasks:")
        for task in missing_tasks:
            logger.error(f"     {task}")
        logger.error("Inventory automation will NOT work!")
    else:
        logger.info("‚úÖ All required inventory tasks are registered")
