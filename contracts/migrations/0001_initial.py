# Generated by Django 5.2.1 on 2025-08-31 08:13

import django.core.validators
import django.db.models.deletion
import django.db.models.functions.text
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('inventory', '0006_inventorytask_match_rule_printer_last_match_rule_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContractStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Название')),
                ('color', models.CharField(default='#6c757d', help_text='HEX цвет бейджа, например #0d6efd', max_length=7, validators=[django.core.validators.RegexValidator('^#([0-9a-fA-F]{6})$', 'HEX вида #1E90FF')], verbose_name='Цвет')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Активен')),
            ],
            options={
                'verbose_name': 'Статус устройства',
                'verbose_name_plural': 'Статусы устройства',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Город')),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
                'ordering': ['name'],
                'constraints': [models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='city_name_ci_unique')],
            },
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Производитель')),
            ],
            options={
                'verbose_name': 'Производитель',
                'verbose_name_plural': 'Производители',
                'ordering': ['name'],
                'constraints': [models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='mfr_name_ci_unique')],
            },
        ),
        migrations.CreateModel(
            name='DeviceModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Модель')),
                ('device_type', models.CharField(choices=[('printer', 'Принтер/МФУ'), ('scanner', 'Сканер'), ('other', 'Другое')], default='printer', max_length=16, verbose_name='Тип устройства')),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='models', to='contracts.manufacturer', verbose_name='Производитель')),
            ],
            options={
                'verbose_name': 'Модель оборудования',
                'verbose_name_plural': 'Модели оборудования',
                'ordering': ['manufacturer__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ContractDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=255, verbose_name='Адрес')),
                ('room_number', models.CharField(blank=True, max_length=128, verbose_name='№ кабинета')),
                ('serial_number', models.CharField(blank=True, max_length=128, verbose_name='Серийный номер')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='contract_devices', to='contracts.city', verbose_name='Город')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='contract_devices', to='inventory.organization', verbose_name='Организация')),
                ('printer', models.OneToOneField(blank=True, help_text='Связанный объект из опроса (если есть)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contract_device', to='inventory.printer', verbose_name='Связанный принтер (опрос)')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='devices', to='contracts.contractstatus', verbose_name='Статус')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='devices', to='contracts.devicemodel', verbose_name='Модель оборудования')),
            ],
            options={
                'verbose_name': 'Устройство по договору',
                'verbose_name_plural': 'Устройства по договору',
                'ordering': ['organization__name', 'city__name', 'address', 'room_number'],
                'indexes': [models.Index(fields=['organization'], name='contracts_c_organiz_ab57a0_idx'), models.Index(fields=['city'], name='contracts_c_city_id_b33357_idx'), models.Index(fields=['status'], name='contracts_c_status__0e8794_idx'), models.Index(fields=['serial_number'], name='contracts_c_serial__d77565_idx')],
                'constraints': [models.UniqueConstraint(django.db.models.functions.text.Lower('serial_number'), models.F('organization'), condition=models.Q(('serial_number__isnull', False), models.Q(('serial_number', ''), _negated=True)), name='uq_contractdevice_org_sn_ci')],
            },
        ),
        migrations.AddIndex(
            model_name='devicemodel',
            index=models.Index(fields=['manufacturer', 'name'], name='contracts_d_manufac_67e5db_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='devicemodel',
            unique_together={('manufacturer', 'name')},
        ),
    ]
