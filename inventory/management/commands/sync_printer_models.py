# inventory/management/commands/sync_printer_models.py
"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –º–æ–¥–µ–ª–µ–π –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
–º–µ–∂–¥—É contracts.ContractDevice –∏ inventory.Printer –ø–æ —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º.
"""

from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from django.db.models import Q, Count
from django.db.models.functions import Lower
from contracts.models import ContractDevice
from inventory.models import Printer


class Command(BaseCommand):
    help = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∏–∑ contracts –≤ inventory –ø–æ —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è',
        )
        parser.add_argument(
            '--organization',
            type=str,
            help='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞',
        )
        parser.add_argument(
            '--show-duplicates',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ contracts',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        organization = options.get('organization')
        force = options['force']
        show_duplicates = options['show_duplicates']

        self.stdout.write(self.style.MIGRATE_HEADING('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤'))
        self.stdout.write('-' * 80)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–µ—Ä–∏–π–Ω–∏–∫–æ–≤ –≤ contracts
        if show_duplicates:
            self._show_duplicates()
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        devices_qs = ContractDevice.objects.select_related('model__manufacturer', 'organization')

        if organization:
            devices_qs = devices_qs.filter(organization__name__iexact=organization)
            self.stdout.write(f"üìå –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {organization}")

        # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —Å–µ—Ä–∏–π–Ω–∏–∫–æ–º
        devices = devices_qs.exclude(
            Q(serial_number__isnull=True) | Q(serial_number='')
        )

        total_devices = devices.count()
        self.stdout.write(f"üìä –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ contracts —Å —Å–µ—Ä–∏–π–Ω–∏–∫–∞–º–∏: {total_devices}")

        if total_devices == 0:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è  –ù–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'))
            return

        # –°—á—ë—Ç—á–∏–∫–∏
        matched = 0
        updated = 0
        skipped = 0
        errors = 0
        changes = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        for device in devices:
            try:
                # –ò—â–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —Å–µ—Ä–∏–π–Ω–∏–∫—É (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
                printers = Printer.objects.annotate(
                    sn_lower=Lower('serial_number')
                ).filter(
                    sn_lower=device.serial_number.lower()
                )

                if not printers.exists():
                    continue

                matched += 1

                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ —Å –æ–¥–Ω–∏–º —Å–µ—Ä–∏–π–Ω–∏–∫–æ–º - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                if printers.count() > 1:
                    self.stdout.write(
                        self.style.WARNING(
                            f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {printers.count()} –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ —Å SN: {device.serial_number}"
                        )
                    )

                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ contracts (—Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª—å, –±–µ–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è)
                correct_model = device.model.name  # –ù–∞–ø—Ä–∏–º–µ—Ä: "LaserJet Pro M404dn"

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã
                for printer in printers:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
                    if printer.model == correct_model:
                        skipped += 1
                        continue

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏ –Ω–µ —É–∫–∞–∑–∞–Ω --force
                    if printer.model and not force:
                        skipped += 1
                        self.stdout.write(
                            self.style.WARNING(
                                f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–º–æ–¥–µ–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force): "
                                f"SN:{device.serial_number} | "
                                f"–°—Ç–∞—Ä–æ–µ: '{printer.model}' ‚Üí –ù–æ–≤–æ–µ: '{correct_model}'"
                            )
                        )
                        continue

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                    change_info = {
                        'printer_ip': printer.ip_address,
                        'serial_number': device.serial_number,
                        'old_model': printer.model or '(–ø—É—Å—Ç–æ)',
                        'new_model': correct_model,
                        'organization': device.organization.name,
                    }
                    changes.append(change_info)

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ dry-run
                    if not dry_run:
                        printer.model = correct_model
                        printer.save(update_fields=['model'])

                    updated += 1

                    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                    style = self.style.SUCCESS if not dry_run else self.style.WARNING
                    prefix = "‚úÖ" if not dry_run else "üîç"
                    self.stdout.write(
                        style(
                            f"{prefix} {printer.ip_address} | SN:{device.serial_number} | "
                            f"{device.organization.name}\n"
                            f"   –ë—ã–ª–æ: '{change_info['old_model']}'\n"
                            f"   –°—Ç–∞–ª–æ: '{correct_model}'"
                        )
                    )

            except Exception as e:
                errors += 1
                self.stdout.write(
                    self.style.ERROR(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ SN:{device.serial_number}: {str(e)}"
                    )
                )

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write('-' * 80)
        self.stdout.write(self.style.MIGRATE_HEADING('üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:'))
        self.stdout.write(f"  –£—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ contracts: {total_devices}")
        self.stdout.write(f"  –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ —Å–µ—Ä–∏–π–Ω–∏–∫–∞–º: {matched}")
        self.stdout.write(self.style.SUCCESS(f"  –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}"))
        self.stdout.write(self.style.WARNING(f"  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}"))
        if errors:
            self.stdout.write(self.style.ERROR(f"  –û—à–∏–±–æ–∫: {errors}"))

        if dry_run and changes:
            self.stdout.write('\n' + self.style.WARNING(
                '‚ö†Ô∏è  –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (--dry-run). '
                '–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ —ç—Ç–æ–≥–æ —Ñ–ª–∞–≥–∞.'
            ))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if changes and not dry_run:
            self._save_report(changes)

    def _show_duplicates(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ contracts"""
        self.stdout.write(self.style.MIGRATE_HEADING('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤'))
        self.stdout.write('-' * 80)

        # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        from django.db.models import Count
        from django.db.models.functions import Lower

        duplicates = (
            ContractDevice.objects
            .exclude(Q(serial_number__isnull=True) | Q(serial_number=''))
            .annotate(sn_lower=Lower('serial_number'))
            .values('sn_lower')
            .annotate(count=Count('id'))
            .filter(count__gt=1)
            .order_by('-count')
        )

        if not duplicates:
            self.stdout.write(self.style.SUCCESS('‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'))
            return

        self.stdout.write(
            self.style.WARNING(f'‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates.count()}')
        )

        for dup in duplicates:
            sn = dup['sn_lower']
            count = dup['count']

            devices = ContractDevice.objects.annotate(
                sn_lower=Lower('serial_number')
            ).filter(sn_lower=sn).select_related('organization', 'model')

            self.stdout.write(f"\nüì¶ –°–µ—Ä–∏–π–Ω–∏–∫: {sn.upper()} ({count} –∑–∞–ø–∏—Å–µ–π)")
            for device in devices:
                self.stdout.write(
                    f"   ‚Ä¢ {device.organization.name} | {device.model} | "
                    f"{device.city.name} | {device.address}"
                )

    def _save_report(self, changes):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á—ë—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ñ–∞–π–ª"""
        import csv
        from datetime import datetime

        filename = f'sync_models_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv'

        try:
            with open(filename, 'w', newline='', encoding='utf-8-sig') as f:
                writer = csv.DictWriter(
                    f,
                    fieldnames=['printer_ip', 'serial_number', 'old_model', 'new_model', 'organization']
                )
                writer.writeheader()
                writer.writerows(changes)

            self.stdout.write(
                self.style.SUCCESS(f'\nüíæ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {str(e)}')
            )